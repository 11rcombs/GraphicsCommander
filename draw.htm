<!DOCTYPE html>
<html>
	<head>
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="viewport" content="user-scalable=no, minimum-scale=1, maximum-scale=1, initial-scale=1"
		<link rel="icon" href="favicon.png"/>
		<script src="/socket.io/socket.io.js"></script>
		<script>
"use strict";
var socket = io.connect();
var sketchpad;

document.addEventListener("DOMContentLoaded", function(){
	sketchpad = document.getElementById("sketchpad");
	var context = sketchpad.ctx = sketchpad.getContext("2d");

// create a drawer which tracks touch movements
var drawer = {
   isDrawing: false,
   touchstart: function(coors, coors2){
      sketchpad.ctx.beginPath();
      sketchpad.ctx.moveTo(coors.x, coors.y);
      this.isDrawing = true;
   },
   touchmove: function(coors, coors2){
      if (this.isDrawing) {
         sketchpad.ctx.lineTo(coors.x, coors.y);
         sketchpad.ctx.stroke();
      }
	if(sketchpad.live){
		sendImage();
	}
   },
   touchend: function(coors){
      if (this.isDrawing) {
         this.isDrawing = false;
      }
	if(sketchpad.autoUpdate){
		sendImage();
	}
   }
};

	// attach the touchstart, touchmove, touchend event listeners.
	sketchpad.addEventListener('touchstart',draw, false);
	sketchpad.addEventListener('touchmove',draw, false);
	sketchpad.addEventListener('touchend',draw, false);
	document.getElementById("court").addEventListener("load", function(){
		drawImageFromTag(this);
	}, false);

// create a function to pass touch events and coordinates to drawer
function draw(event){
event.preventDefault();
   // get the touch coordinates
   if(event.targetTouches.length > 0){
   	var coors = {
   	   x: event.targetTouches[0].pageX,
   	   y: event.targetTouches[0].pageY
   	};
	var coors2 = event.targetTouches;
   }
   // pass the coordinates to the appropriate handler
   drawer[event.type](coors,coors2);
}
var colors = document.getElementById("colors");
var colorList = ["black", "red", "orange", "yellow", "green", "blue", "purple", "grey", "white"];
for(var i = 0; i < colorList.length; i++){
	var color = colorList[i];
	var newDiv = document.createElement("div");
	newDiv.style.backgroundColor = color;
	newDiv.color = color;
	newDiv.className = "color";
	newDiv.addEventListener("click", function(){
		sketchpad.ctx.strokeStyle = this.color;
	},false);
	colors.appendChild(newDiv);
}
}, false);
function sendImage(){
    var string = document.getElementById("sketchpad").toDataURL("image/png");
    string = string.split("base64,")[1];
    socket.emit("writeImage", string);
}
function drawImageFromId(id){
	drawImageFromTag(document.getElementById(id));
}
function drawImageFromTag(tag){
	sketchpad.ctx.drawImage(tag, 0, 0, 720, 480);
	if(sketchpad.autoUpdate || sketchpad.live){
		sendImage();
	}
}
function clear(){
	sketchpad.ctx.clearRect(0, 0, 720, 480);
}
		</script>
		<style>
#background_images>img, #background_images>div{
	width: 100px;
	height: 100px;
	border: 2px solid black;
	display: inline-block;
}
.color{
	height: 30px;
	width: 30px;
	border: 1px solid black;
	display: inline-block;
}
		</style>
		<title>LiveText Sketchpad</title>
	</head>
	<body>
		<div style="display: block; float: left;">
			<div id="container">
				<canvas id="sketchpad" style="border: 1px solid black;" height="480" width="720">
				</canvas>
			</div>
		</div>
		<button onclick="sendImage();" style="height: 50px; padding-bottom: 10px; display: inline-block;">Update</button><br><br>
		Images:
		<div style="" id="background_images">
			<img id="court" src="/images/basketball_court.png" onClick="drawImageFromTag(this);">
			<img id="half_court" src="/images/half_court.png" onClick="drawImageFromTag(this);">
			<img id="blank" src="/images/blank.png" onClick="drawImageFromTag(this);">
		</div>
		<div>
		Thickness: <input type="range" id="thickness" min="1" max="10" value="1" onchange="sketchpad.ctx.lineWidth = this.value;">
		</div>
		Auto-Update: <input type="checkbox" onchange="sketchpad.autoUpdate = this.checked;">
		Live: <input type="checkbox" onchange="sketchpad.live = this.checked;">
		<div id="colors">
		Colors:
		</div>
	</body>
</html>